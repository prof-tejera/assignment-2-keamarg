{"version":3,"sources":["TimerProvider.js","components/documentation/DocumentComponent.js","components/generic/Loading.js","utils/helpers.js","components/generic/Button.js","components/generic/DisplayTime.js","components/generic/Panel.js","components/generic/Settings.js","components/generic/Timer.js","utils/hooks.js","components/generic/Navbar.js","views/DocumentationView.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","App.js","index.js"],"names":["TimerContext","createContext","setBtnState","console","log","setSettingsState","TimerProvider","children","useState","btnState","settingsState","stopwatchTimer","setStopwatchTimer","stopwatchSettings","setStopwatchSettings","countdownTimer","setCountdownTimer","countdownSettings","setCountdownSettings","xyTimer","setXyTimer","xySettings","setXySettings","tabataTimer","setTabataTimer","tabataSettings","setTabataSettings","time","setTime","rounds","setRounds","rest","setRest","isRunning","setIsRunning","savedTime","setSavedTime","docs","setDocs","message","setMessage","showMessage","setShowMessage","currentRound","setCurrentRound","showSettingsMessage","setShowSettingsMessage","showTimerRounds","setShowTimerRounds","Provider","value","Wrapper","styled","div","Container","Title","RenderComponent","Documentation","table","DocumentComponent","props","title","component","propDocs","map","doc","i","prop","description","type","defaultValue","sizeMapping","small","medium","large","Dot","span","size","color","DotGroup","Loading","defaultProps","COLORS","BUTTONS","reset","start","stop","settings","forward","BTNTYPE","TIMERS","INPUTS","MESSAGES","timerValue","fullTime","Date","toISOString","substr","Btn","button","Button","styleName","onClick","inner","className","Display","label","DisplayTime","useContext","Panel","timerType","SetInput","input","Credentials","p","Text","Settings","handleChange","e","target","name","htmlFor","min","max","step","onChange","h1","UpperPanel","LowerPanel","Middlepanel","SettingsPanel","Message","Timer","handleClick","t","Number","currentTarget","delay","callback","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","useTimer","NavList","ul","links","path","Navbar","innerHTML","link","index","to","exact","activeClassName","Stopwatch","CountDown","XY","Tabata","Timers","App","routes","Countdown","key","DocumentationView","TimersView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51de5ef6.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport const TimerContext = createContext({\n  setBtnState: () => {\n    console.log(\"setBtnState: Im outside the Timerprovider\");\n  },\n  setSettingsState: () => {\n    console.log(\"setSettingsState: Im outside the Timerprovider\");\n  },\n});\n\nconst TimerProvider = ({ children }) => {\n  const [btnState, setBtnState] = useState(true);\n  const [settingsState, setSettingsState] = useState(true);\n  const [stopwatchTimer, setStopwatchTimer] = useState(true);\n  const [stopwatchSettings, setStopwatchSettings] = useState(false);\n  const [countdownTimer, setCountdownTimer] = useState(true);\n  const [countdownSettings, setCountdownSettings] = useState(false);\n  const [xyTimer, setXyTimer] = useState(true);\n  const [xySettings, setXySettings] = useState(false);\n  const [tabataTimer, setTabataTimer] = useState(true);\n  const [tabataSettings, setTabataSettings] = useState(false);\n  const [time, setTime] = useState(0);\n  const [rounds, setRounds] = useState(0);\n  const [rest, setRest] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [savedTime, setSavedTime] = useState(0);\n  const [docs, setDocs] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [showMessage, setShowMessage] = useState(false);\n  const [currentRound, setCurrentRound] = useState(rounds);\n  const [showSettingsMessage, setShowSettingsMessage] = useState(false);\n  const [showTimerRounds, setShowTimerRounds] = useState(true);\n\n  return (\n    <TimerContext.Provider\n      value={{\n        showTimerRounds,\n        setShowTimerRounds,\n        showSettingsMessage,\n        setShowSettingsMessage,\n        currentRound,\n        setCurrentRound,\n        message,\n        setMessage,\n        showMessage,\n        setShowMessage,\n        docs,\n        setDocs,\n        savedTime,\n        setSavedTime,\n        isRunning,\n        setIsRunning,\n        time,\n        setTime,\n        rounds,\n        setRounds,\n        rest,\n        setRest,\n        btnState,\n        setBtnState,\n        settingsState,\n        setSettingsState,\n        stopwatchTimer,\n        setStopwatchTimer,\n        stopwatchSettings,\n        setStopwatchSettings,\n        countdownTimer,\n        setCountdownTimer,\n        countdownSettings,\n        setCountdownSettings,\n        xyTimer,\n        setXyTimer,\n        xySettings,\n        setXySettings,\n        tabataTimer,\n        setTabataTimer,\n        tabataSettings,\n        setTabataSettings,\n      }}\n    >\n      {children}\n    </TimerContext.Provider>\n  );\n};\n\nexport default TimerProvider;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = (props) => {\n  return (\n    <Wrapper>\n      <Title>{props.title}</Title>\n      <Container>\n        <RenderComponent>{props.component}</RenderComponent>\n        <Documentation>\n          <tbody>\n            <tr>\n              <th>Prop</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default value</th>\n            </tr>\n          </tbody>\n          {props.propDocs.map((doc, i) => {\n            return (\n              <tbody key={i}>\n                <tr>\n                  <td>{doc.prop}</td>\n                  <td>{doc.description}</td>\n                  <td>{doc.type}</td>\n                  <td>\n                    <code>{doc.defaultValue}</code>\n                  </td>\n                </tr>\n              </tbody>\n            );\n          })}\n        </Documentation>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = (props) => {\n  const size = sizeMapping[props.size];\n  const { color } = props;\n\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={size} color={color} />\n        <Dot size={size} color={color} />\n      </DotGroup>\n    </Container>\n  );\n};\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nLoading.defaultProps = {\n  size: \"medium\",\n  color: primaryColor,\n};\n\nexport default Loading;\n","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\nexport const COLORS = {\n  countdown: \"#316E94\",\n  stopwatch: \"#3FA2E0\",\n  xy: \"#E0BB34\",\n  tabata: \"#4E1394\",\n  purple: \"#7C28E0\",\n  start: \"#26DB5C\",\n  stop: \"#DB4E4E\",\n  reset: \"#2F333B\",\n  text: \"#FAF9F6\",\n  nav: \"#231F20\",\n};\n\nexport const BUTTONS = {\n  reset: \"bi bi-arrow-counterclockwise\",\n  start: \"bi bi-play-circle\",\n  stop: \"bi bi-pause-circle\",\n  settings: \"bi bi-list\",\n  forward: \"bi bi-skip-forward-circle\",\n};\n\nexport const BTNTYPE = {\n  reset: \"reset\",\n  start: \"start\",\n  stop: \"stop\",\n  settings: \"settings\",\n  forward: \"forward\",\n};\n\nexport const TIMERS = {\n  stopwatch: \"Stopwatch\",\n  countdown: \"Countdown\",\n  xy: \"XY\",\n  tabata: \"Tabata\",\n};\n\nexport const INPUTS = {\n  timer: \"timer\",\n  rounds: \"rounds\",\n  rest: \"rest\",\n};\n\nexport const MESSAGES = {\n  finished: \"Well done!\",\n  settimer: \"Check your settings\",\n};\nexport const timerValue = (value) => {\n  const fullTime = new Date(value * 1000).toISOString();\n  const hours = fullTime.substr(12, 1);\n  const minutes = fullTime.substr(14, 2);\n  const seconds = fullTime.substr(17, 2);\n  return hours + \"h \" + minutes + \"m \" + seconds + \"s\";\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { COLORS, BUTTONS, BTNTYPE } from \"../../utils/helpers\";\n\nconst Btn = styled.button`\n  border-radius: 0.3rem;\n  border: none;\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: ${COLORS.text};\n  transition: 0.2s ease;\n  :hover {\n    opacity: 0.6;\n  }\n\n  background-color: ${(props) =>\n    props.value === BTNTYPE.start\n      ? COLORS.start\n      : props.value === BTNTYPE.stop\n      ? COLORS.stop\n      : COLORS.reset};\n`;\n\nconst Button = (props) => {\n  Button.defaultProps = {\n    styleName: \"none\",\n    value: \"none\",\n    onClick: null,\n  };\n  const { value, styleName, onClick, inner } = props;\n  return (\n    <Btn className={styleName} value={value} onClick={onClick}>\n      {inner}\n      <i className={BUTTONS[value] ? BUTTONS[value] : BUTTONS.start}></i>\n    </Btn>\n  );\n};\nButton.propTypes = {\n  styleName: PropTypes.string,\n  value: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\nimport styled from \"styled-components\";\nimport { timerValue } from \"../../utils/helpers.js\";\n\nconst Display = styled.label`\n  margin-bottom: 2rem;\n  font-size: 3rem;\n  font-weight: 300;\n  // font-family: \"Orbitron\", sans-serif;\n  color: white;\n`;\n\nconst DisplayTime = () => {\n  const { time } = useContext(TimerContext);\n\n  return <Display>{timerValue(time)}</Display>;\n};\n\nexport default DisplayTime;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { COLORS, TIMERS } from \"../../utils/helpers.js\";\n\nconst Container = styled.div`\n  // border: 1px solid black;\n  width: 20rem;\n  background-color: ${(props) =>\n    props.type === TIMERS.stopwatch\n      ? COLORS.stopwatch\n      : props.type === TIMERS.countdown\n      ? COLORS.countdown\n      : props.type === TIMERS.xy\n      ? COLORS.xy\n      : COLORS.tabata};\n  font-size: 2rem;\n  border-radius: 0rem 0rem 0.3rem 0.3rem;\n`;\n\nconst Panel = (props) => {\n  Panel.defaultProps = {\n    timerType: \"Stopwatch\",\n  };\n  return (\n    <Container type={props.timerType} className=\"mainPanel\">\n      {props.children}\n    </Container>\n  );\n};\n\nPanel.propTypes = {\n  timerType: PropTypes.string,\n};\n\nexport default Panel;\n","import styled from \"styled-components\";\nimport { INPUTS, TIMERS, timerValue } from \"../../utils/helpers.js\";\nimport PropTypes from \"prop-types\";\nimport { COLORS } from \"../../utils/helpers.js\";\nimport React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\n\nconst SetInput = styled.input`\n  // border: 1px solid black;\n  color: ${(props) =>\n    props.type === TIMERS.stopwatch\n      ? COLORS.stopwatch\n      : props.type === TIMERS.countdown\n      ? COLORS.countdown\n      : props.type === TIMERS.xy\n      ? COLORS.xy\n      : COLORS.tabata};\n  font-size: 0.8rem;\n  border-radius: 0.5rem;\n  border: 0px;\n`;\n\nconst Credentials = styled.p`\n  font-size: 0.8rem;\n  color: ${COLORS.text};\n  padding-top: 0.5rem;\n`;\n\nconst Text = styled.p`\n  font-size: 1rem;\n  color: ${COLORS.text};\n  padding-top: 0.5rem;\n  margin-block-start: 0;\n  margin-block-end: 0;\n`;\n\nconst Settings = (props) => {\n  const { timerType } = props;\n\n  Settings.defaultProps = {\n    timerType: TIMERS.countdown,\n  };\n\n  const { time, setTime } = useContext(TimerContext);\n  const { rounds, setRounds } = useContext(TimerContext);\n  const { rest, setRest } = useContext(TimerContext);\n  const { docs } = useContext(TimerContext);\n\n  const handleChange = (e) => {\n    if (!docs) {\n      if (e.target.name === INPUTS.timer) {\n        setTime(e.target.value);\n      } else if (e.target.name === INPUTS.rounds) {\n        setRounds(e.target.value);\n      } else {\n        setRest(e.target.value);\n      }\n    }\n  };\n\n  return (\n    <div className=\"w-75\">\n      {timerType !== TIMERS.stopwatch ? (\n        <>\n          <Text>\n            <label htmlFor=\"timer\">Set workout time</label>\n            <br />\n            {timerValue(time)}\n          </Text>\n          <SetInput\n            name=\"timer\"\n            type=\"range\"\n            min=\"0\"\n            max=\"7200\"\n            step=\"5\"\n            value={time}\n            onChange={handleChange}\n          ></SetInput>\n        </>\n      ) : null}\n      {timerType === TIMERS.xy || timerType === TIMERS.tabata ? (\n        <>\n          <Text>\n            <label htmlFor=\"rounds\">Set number of rounds</label>\n            <br />\n            {rounds}\n          </Text>\n          <SetInput\n            name=\"rounds\"\n            type=\"range\"\n            min=\"1\"\n            max=\"5\"\n            step=\"1\"\n            value={rounds}\n            onChange={handleChange}\n          ></SetInput>\n        </>\n      ) : null}\n      {props.timerType === TIMERS.tabata ? (\n        <>\n          <Text>\n            <label htmlFor=\"rest\">Set rest time</label>\n            <br />\n            {timerValue(rest).substr(4, 6)}\n          </Text>\n          <SetInput\n            name=\"rest\"\n            type=\"range\"\n            min=\"0\"\n            max=\"300\"\n            step=\"15\"\n            value={rest}\n            onChange={handleChange}\n          ></SetInput>\n        </>\n      ) : null}\n      <Credentials>By Martin Gundtoft</Credentials>\n    </div>\n  );\n};\n\nSettings.propTypes = {\n  timerType: PropTypes.string,\n};\n\nexport default Settings;\n","import React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\nimport styled from \"styled-components\";\nimport Panel from \"../generic/Panel\";\nimport Settings from \"../generic/Settings\";\nimport Button from \"../generic/Button\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport { BTNTYPE, COLORS, TIMERS, MESSAGES } from \"../../utils/helpers\";\nimport { useTimer } from \"../../utils/hooks\";\n\nconst Title = styled.h1`\n  color: ${COLORS.text};\n`;\nconst UpperPanel = styled.div`\n  position: relative;\n  height: 15rem;\n  .false {\n    color: ${COLORS.stop};\n    animation: pulse 1.2s ease infinite, color 0.3s ease;\n  }\n\n  @keyframes pulse {\n    0% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(1.1);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n\n  @keyframes color {\n    0% {\n      color: black;\n    }\n    100% {\n      color: ${COLORS.stop};\n    }\n  }\n\n  i.stopwatch {\n    font-size: 10rem;\n    opacity: 40%;\n    display: block;\n  }\n  .settingsBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    // display: block;\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n    background-color: transparent;\n  }\n`;\nconst LowerPanel = styled.div`\n  height: 15rem;\n  .ctaBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    background-color: transparent;\n  }\n`;\nconst Middlepanel = styled.div`\n  height: 5rem;\n  padding-top: 4rem;\n  .ctaBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    background-color: transparent;\n    line-height: 1rem;\n  }\n`;\n\nconst SettingsPanel = styled.div`\n  position: relative;\n  height: 25rem;\n  .settingsBtn {\n    z-index: 1;\n    font-size: 1.5rem;\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n    background-color: transparent;\n  }\n`;\nconst Message = styled.p`\n  color: ${COLORS.text};}\n  line-height: 2rem;\n\n`;\n\nconst Timer = (props) => {\n  const { time, setTime } = useContext(TimerContext);\n  const { isRunning, setIsRunning } = useContext(TimerContext);\n  const { btnState, setBtnState } = useContext(TimerContext);\n  const { settingsState, setSettingsState } = useContext(TimerContext);\n  const { savedTime, setSavedTime } = useContext(TimerContext);\n  const { docs } = useContext(TimerContext);\n  const { rounds, setRounds } = useContext(TimerContext);\n  const { currentRound, setCurrentRound } = useContext(TimerContext);\n  const { message, setMessage } = useContext(TimerContext);\n  const { showMessage, setShowMessage } = useContext(TimerContext);\n  const { showSettingsMessage, setShowSettingsMessage } =\n    useContext(TimerContext);\n  const { showTimerRounds, setShowTimerRounds } = useContext(TimerContext);\n\n  const { timerType } = props;\n\n  const handleClick = (e) => {\n    if (!docs) {\n      const t = Number(time);\n\n      // Start/stop button\n      if (\n        e.currentTarget.value === BTNTYPE.start ||\n        e.currentTarget.value === BTNTYPE.stop\n      ) {\n        if ((!showMessage && t) || timerType === TIMERS.stopwatch) {\n          setIsRunning(!isRunning);\n          setBtnState(!btnState);\n        }\n      }\n\n      //Reset button\n      if (e.currentTarget.value === BTNTYPE.reset) {\n        setTime(savedTime);\n        setBtnState(true);\n        setIsRunning(false);\n        setShowMessage(false);\n      }\n\n      //Forward button\n      if (e.currentTarget.value === BTNTYPE.forward) {\n        if (t) {\n          setTime(0);\n          setRounds(0);\n          setMessage(MESSAGES.finished);\n          setShowMessage(true);\n        }\n      }\n\n      //Settings button\n      if (e.currentTarget.value === BTNTYPE.settings) {\n        setSettingsState(!settingsState);\n        setBtnState(true);\n        setSavedTime(time);\n        setIsRunning(false);\n        setShowTimerRounds(false);\n        setShowMessage(false);\n\n        if (timerType === TIMERS.countdown) {\n          if (!t) {\n            setMessage(MESSAGES.settimer);\n            setShowSettingsMessage(true);\n          } else {\n            setShowSettingsMessage(false);\n            setShowTimerRounds(true);\n          }\n        }\n        if (timerType === TIMERS.xy || timerType === TIMERS.tabata) {\n          if (!t || rounds < 1) {\n            setMessage(MESSAGES.settimer);\n            setShowSettingsMessage(true);\n          } else {\n            setShowSettingsMessage(false);\n            setShowTimerRounds(true);\n          }\n        }\n      }\n\n      //Stopwatch\n      if (timerType === TIMERS.stopwatch) {\n        setSavedTime(0);\n        setShowTimerRounds(true);\n      }\n\n      //Countdown\n      if (timerType === TIMERS.countdown) {\n      }\n\n      //XY\n      if (timerType === TIMERS.xy) {\n        setCurrentRound(rounds);\n      }\n\n      //Tabata\n      if (timerType === TIMERS.tabata) {\n        setCurrentRound(rounds);\n      }\n    }\n  };\n  useTimer(timerType);\n\n  if (!settingsState || timerType === TIMERS.stopwatch) {\n    return (\n      <Panel timerType={timerType}>\n        <UpperPanel className=\"text-center\">\n          <Title>{timerType}</Title>\n          {timerType !== TIMERS.stopwatch ? (\n            <Button\n              styleName=\"settingsBtn\"\n              onClick={handleClick}\n              value={BTNTYPE.settings}\n            ></Button>\n          ) : null}\n          <i className={`bi bi-stopwatch stopwatch ${!isRunning}`}></i>\n        </UpperPanel>\n        <Middlepanel>\n          <div className=\"container\">\n            <div className=\"row col text-center\">\n              {showSettingsMessage ? (\n                <>\n                  <Button\n                    styleName=\"ctaBtn\"\n                    onClick={handleClick}\n                    value={BTNTYPE.settings}\n                    inner={message + \" \"}\n                  ></Button>\n                </>\n              ) : showMessage ? (\n                <Message> {message}</Message>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n        </Middlepanel>\n        <LowerPanel className=\"d-flex align-items-center\">\n          <div className=\"container\">\n            <div className=\"row col text-center\">\n              {showTimerRounds &&\n              (timerType === TIMERS.xy || timerType === TIMERS.tabata) ? (\n                <Message>\n                  {\" \"}\n                  {currentRound} of {rounds} rounds left\n                </Message>\n              ) : (\n                <Message> &nbsp;</Message>\n              )}\n              {showTimerRounds ? <DisplayTime /> : <></>}\n            </div>\n            <div className=\"row justify-content-around\">\n              <Button\n                styleName=\"col-3\"\n                value={btnState ? BTNTYPE.start : BTNTYPE.stop}\n                onClick={handleClick}\n              ></Button>\n              <Button\n                styleName=\"col-3\"\n                value={BTNTYPE.reset}\n                onClick={handleClick}\n              ></Button>\n              {timerType !== TIMERS.stopwatch ? (\n                <Button\n                  styleName=\"col-3\"\n                  value={BTNTYPE.forward}\n                  onClick={handleClick}\n                ></Button>\n              ) : (\n                <></>\n              )}\n            </div>\n          </div>\n        </LowerPanel>\n      </Panel>\n    );\n  }\n  return (\n    <Panel timerType={timerType}>\n      <SettingsPanel className=\"settingspanel text-center d-flex align-items-center justify-content-center\">\n        <Button\n          // type=\"settingsBtn\"\n          styleName=\"settingsBtn\"\n          onClick={handleClick}\n          value={BTNTYPE.settings}\n        ></Button>\n        <Settings styleName=\"p-2\" timerType={timerType}></Settings>\n      </SettingsPanel>\n    </Panel>\n  );\n};\nexport default Timer;\n","import { useContext, useRef, useEffect, useState } from \"react\";\nimport { TimerContext } from \"../TimerProvider\";\nimport { TIMERS, MESSAGES } from \"./helpers\";\n\nexport const useTimer = (timerType) => {\n  const [delay] = useState(1000);\n  const { isRunning, setIsRunning } = useContext(TimerContext);\n  const { time, setTime } = useContext(TimerContext);\n  const { setBtnState } = useContext(TimerContext);\n  const { setShowMessage } = useContext(TimerContext);\n  const { setMessage } = useContext(TimerContext);\n\n  useInterval(\n    () => {\n      if (timerType === TIMERS.stopwatch) {\n        setTime(Number(time) + 1);\n      } else {\n        if (time > 0) {\n          setTime(Number(time) - 1);\n        } else {\n          setIsRunning(false);\n          setBtnState(true);\n          setMessage(MESSAGES.finished);\n          setShowMessage(true);\n        }\n      }\n    },\n    isRunning ? delay : null\n  );\n\n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest function.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n};\n","import React, { useContext } from \"react\";\nimport { TimerContext } from \"../../TimerProvider\";\nimport { NavLink } from \"react-router-dom\";\nimport { COLORS, TIMERS } from \"../../utils/helpers\";\nimport styled from \"styled-components\";\n\nconst NavList = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0.5rem 0;\n  overflow: hidden;\n  border-radius: 0.3rem 0.3rem 0rem 0rem;\n  width: 20rem;\n\n  a {\n    color: ${COLORS.text};\n    text-decoration: none;\n  }\n  .Stopwatch,\n  .Countdown,\n  .XY,\n  .Tabata {\n    background-color: ${COLORS.nav};\n    transition: 0.5s;\n  }\n  .Stopwatch:hover {\n    background-color: ${COLORS.stopwatch};\n  }\n  .Countdown:hover {\n    background-color: ${COLORS.countdown};\n  }\n  .Tabata:hover {\n    background-color: ${COLORS.tabata};\n  }\n  .XY:hover {\n    background-color: ${COLORS.xy};\n  }\n\n  li {\n    display: inline;\n    list-style-type: none;\n    text-decoration: none;\n    padding: 0.75rem;\n  }\n  .current {\n    .Stopwatch {\n      background-color: ${COLORS.stopwatch};\n    }\n    .Countdown {\n      background-color: ${COLORS.countdown};\n    }\n    .XY {\n      background-color: ${COLORS.xy};\n    }\n    .Tabata {\n      background-color: ${COLORS.tabata};\n    }\n  }\n  .active {\n    background-color: #04aa6d;\n  }\n`;\n\nconst links = [\n  { name: TIMERS.stopwatch, path: \"/\" },\n  { name: TIMERS.countdown, path: \"/countdown\" },\n  { name: TIMERS.xy, path: \"/xy\" },\n  { name: TIMERS.tabata, path: \"/tabata\" },\n];\n\nconst Navbar = () => {\n  const { setTime } = useContext(TimerContext);\n  const { setRounds } = useContext(TimerContext);\n  const { setRest } = useContext(TimerContext);\n  const { setIsRunning } = useContext(TimerContext);\n  const { setBtnState } = useContext(TimerContext);\n  const { setSettingsState } = useContext(TimerContext);\n  const { docs } = useContext(TimerContext);\n  const { setCurrentRound } = useContext(TimerContext);\n  const { setShowSettingsMessage } = useContext(TimerContext);\n  const { setShowTimerRounds } = useContext(TimerContext);\n  const { setShowMessage } = useContext(TimerContext);\n\n  const handleClick = (e) => {\n    if (!docs) {\n      setTime(0);\n      setRounds(0);\n      setRest(0);\n      setIsRunning(false);\n      setBtnState(true);\n      setSettingsState(true);\n      setCurrentRound(0);\n      setShowSettingsMessage(false);\n      setShowMessage(false);\n      if (e.target.innerHTML === \"Stopwatch\") {\n        setShowTimerRounds(true);\n      }\n    }\n  };\n\n  return (\n    <NavList>\n      {links.map((link, index) => (\n        <NavLink key={index} to={link.path} exact activeClassName=\"current\">\n          <li className={link.name} onClick={handleClick}>\n            {link.name}\n          </li>\n        </NavLink>\n      ))}\n    </NavList>\n  );\n};\nexport default Navbar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\nimport Button from \"../components/generic/Button\";\nimport DisplayTime from \"../components/generic/DisplayTime\";\nimport Panel from \"../components/generic/Panel\";\nimport Timer from \"../components/generic/Timer\";\nimport Settings from \"../components/generic/Settings\";\nimport Navbar from \"../components/generic/Navbar\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\nconst Documentation = () => {\n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"medium\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Button\"\n          component={<Button />}\n          propDocs={[\n            {\n              prop: \"styleName\",\n              description: \"Has the classNames\",\n              type: \"String\",\n              defaultValue: \"none\",\n            },\n            {\n              prop: \"value\",\n              description: \"Has the button type\",\n              type: \"String\",\n              defaultValue: \"none\",\n            },\n            {\n              prop: \"onClick\",\n              description: \"Holds the clickHandler function\",\n              type: \"function\",\n              defaultValue: \"null\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"DisplayTime\"\n          component={<DisplayTime />}\n          propDocs={[{}]}\n        />\n        <DocumentComponent\n          title=\"Panel\"\n          component={<Panel />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"myClass\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Settings\"\n          component={<Settings />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"Countdown\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Timer\"\n          component={<Timer />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"Countdown\",\n            },\n          ]}\n        />\n        <DocumentComponent\n          title=\"Navbar\"\n          component={<Navbar />}\n          propDocs={[\n            {\n              prop: \"timerType\",\n              description: \"Has the type of timer\",\n              type: \"String\",\n              defaultValue: \"Countdown\",\n            },\n          ]}\n        />\n      </div>\n    </Container>\n  );\n};\n\nexport default Documentation;\n","import React from \"react\";\nimport Timer from \"../generic/Timer.js\";\n\nconst Stopwatch = () => {\n  const timerType = \"Stopwatch\";\n\n  return <Timer timerType={timerType}></Timer>;\n};\nexport default Stopwatch;\n","import React from \"react\";\nimport Timer from \"../generic/Timer.js\";\n\nconst CountDown = () => {\n  const timerType = \"Countdown\";\n\n  return <Timer timerType={timerType}></Timer>;\n};\nexport default CountDown;\n","import React from \"react\";\nimport Timer from \"../generic/Timer.js\";\n\nconst XY = () => {\n  const timerType = \"XY\";\n\n  return <Timer timerType={timerType}></Timer>;\n};\nexport default XY;\n","import React from \"react\";\nimport Timer from \"../generic/Timer.js\";\n\nconst Tabata = () => {\n  const timerType = \"Tabata\";\n\n  return <Timer timerType={timerType}></Timer>;\n};\nexport default Tabata;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\nimport Navbar from \"../components/generic/Navbar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst App = () => {\n  const routes = [\n    {\n      path: \"/\",\n      component: Stopwatch,\n    },\n    {\n      path: \"/assignment-2-keamarg\",\n      component: Stopwatch,\n    },\n    {\n      path: \"/Stopwatch\",\n      component: Stopwatch,\n    },\n    {\n      path: \"/Countdown\",\n      component: Countdown,\n    },\n    {\n      path: \"/XY\",\n      component: XY,\n    },\n    {\n      path: \"/Tabata\",\n      component: Tabata,\n    },\n  ];\n\n  return (\n    <Timers>\n      <Router>\n        <Navbar />\n        <Switch>\n          {routes.map(({ path, component }, key) => (\n            <Route exact path={path} component={component} key={key} />\n          ))}\n        </Switch>\n      </Router>\n    </Timers>\n  );\n};\n\nexport default App;\n","import React, { useContext } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { TimerContext } from \"./TimerProvider\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\nconst App = () => {\n  const handleClick = (e) => {\n    if (e.target.innerHTML === \"Documentation\") {\n      setDocs(true);\n    } else {\n      setDocs(false);\n    }\n  };\n  const { setDocs } = useContext(TimerContext);\n\n  return (\n    <Container>\n      <Router>\n        <nav>\n          <ul>\n            <li id=\"timers\" onClick={handleClick}>\n              <Link to=\"/\">Timers</Link>\n            </li>\n            <li value=\"docs\" onClick={handleClick}>\n              <Link to=\"/docs\">Documentation</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/docs\">\n            <DocumentationView />\n          </Route>\n          <Route path=\"/\">\n            <TimersView />\n          </Route>\n        </Switch>\n      </Router>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport TimerProvider from \"./TimerProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TimerProvider>\n      <App />\n    </TimerProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}